

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1337 = Integer(1337); _sage_const_2 = Integer(2); _sage_const_128 = Integer(128); _sage_const_0p3 = RealNumber('0.3'); _sage_const_0 = Integer(0); _sage_const_32 = Integer(32); _sage_const_1 = Integer(1)#!/usr/bin/env sage
from Crypto.Util.number import long_to_bytes as l2b
from config import n, C1, C2
e = _sage_const_1337 

n1 = n
PRxy = PolynomialRing(Zmod(n1), names=('x', 'y',)); (x, y,) = PRxy._first_ngens(2)
PRx = PolynomialRing(Zmod(n1), names=('xn',)); (xn,) = PRx._first_ngens(1)
PRZZ = PolynomialRing(Zmod(n1), names=('xz', 'yz',)); (xz, yz,) = PRZZ._first_ngens(2)
 
g1 = x**e - C1
g2 = (x + y)**e - C2
 
q1 = g1.change_ring(PRZZ)
q2 = g2.change_ring(PRZZ)
 
h = q2.resultant(q1)
# need to switch to univariate polynomial ring
# because .small_roots is implemented only for univariate
h = h.univariate_polynomial() # x is hopefully eliminated
h = h.change_ring(PRx).subs(y=xn)
h = h.monic()
 
roots = h.small_roots(X=_sage_const_2 **_sage_const_128 , beta=_sage_const_0p3 )
assert roots, "Failed1"
 
diff = roots[_sage_const_0 ]
if diff > _sage_const_2 **_sage_const_32 :
    diff = -diff
    C1, C2 = C2, C1

print(diff)

x = PRx.gen() # otherwise write xn
g1 = x**e - C1
g2 = (x + diff)**e - C2
 
# gcd
while g2:
    g1, g2 = g2, g1 % g2
 
g = g1.monic()
assert g.degree() == _sage_const_1 , "Failed 2"
 
# g = xn - msg
msg = -g[_sage_const_0 ]
# convert to str
h = msg

print(l2b(h))

