
log_format upstream_log '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"'
                        'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

log_format log_req_resp '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '$request_time req_header:"$req_header" req_body:"$request_body" '
                        'resp_header:"$resp_header" resp_body:"$resp_body"';

lua_need_request_body on;



server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name nginx;
    
    set $resp_body "";
    body_filter_by_lua '
    local resp_body = string.sub(ngx.arg[1], 1, 1000)
    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
    if ngx.arg[2] then
        ngx.var.resp_body = ngx.ctx.buffered
    end
    ';

    set $req_header "";
    set $resp_header "";
    header_filter_by_lua ' 
    local h = ngx.req.get_headers()
    for k, v in pairs(h) do
        ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
    end
    local rh = ngx.resp.get_headers()
    for k, v in pairs(rh) do
        ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
    end
    ';

    access_log  /var/log/nginx/access-upstream.log upstream_log;
    access_log  /var/log/nginx/access-req-resp.log log_req_resp;

    location / {
        proxy_pass http://public:3000; 
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        proxy_set_header Host $http_host;
        proxy_cache_bypass $http_upgrade;       

    }

}

