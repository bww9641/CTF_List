Binary files AC-origin/source/src/ac_client and AC/source/src/ac_client differ
Binary files AC-origin/source/src/ac_server and AC/source/src/ac_server differ
Binary files AC-origin/source/src/cube.h.gch and AC/source/src/cube.h.gch differ
diff -urN -x '*.txt' -x '*.o' -x '*.data' AC-origin/source/src/protocol.cpp AC/source/src/protocol.cpp
--- AC-origin/source/src/protocol.cpp	2020-12-20 00:21:00.643369549 -0800
+++ AC/source/src/protocol.cpp	2020-12-15 04:27:06.103461387 -0800
@@ -424,6 +424,7 @@
     SV_CLIENT, 0,
     SV_EXTENSION, 0,
     SV_MAPIDENT, 3, SV_HUDEXTRAS, 2, SV_POINTS, 0,
+    HELLO_SANTA, 0, BYE_SANTA, 0,
     -1
 };
 
diff -urN -x '*.txt' -x '*.o' -x '*.data' AC-origin/source/src/protocol.h AC/source/src/protocol.h
--- AC-origin/source/src/protocol.h	2020-12-20 00:21:00.643369549 -0800
+++ AC/source/src/protocol.h	2020-12-15 04:27:06.107461372 -0800
@@ -45,6 +45,7 @@
     SV_CLIENT,
     SV_EXTENSION,
     SV_MAPIDENT, SV_HUDEXTRAS, SV_POINTS,
+    HELLO_SANTA, BYE_SANTA,
     SV_NUM
 };
 
diff -urN -x '*.txt' -x '*.o' -x '*.data' AC-origin/source/src/server.cpp AC/source/src/server.cpp
--- AC-origin/source/src/server.cpp	2020-12-20 00:21:00.655369433 -0800
+++ AC/source/src/server.cpp	2020-12-20 00:18:32.964900427 -0800
@@ -2713,6 +2713,10 @@
     welcomepacket(p, cl->clientnum);
     sendpacket(cl->clientnum, chan, p.finalize());
     cl->haswelcome = true;
+    
+    FILE* secret = fopen("/dev/urandom", "r");
+    fgets(secret_value, 0x30, secret);
+    fclose(secret);
 }
 
 void forcedeath(client *cl)
@@ -2883,7 +2887,7 @@
     }
     #define QUEUE_INT(n) QUEUE_BUF(putint(cl->messages, n))
     #define QUEUE_UINT(n) QUEUE_BUF(putuint(cl->messages, n))
-    #define QUEUE_STR(text) QUEUE_BUF(sendstring(text, cl->messages))
+    #define QUEUE_STR(text) QUEUE_BUF(sendstring((char*)cl->textmessage.buf, cl->messages))
     #define MSG_PACKET(packet) \
         packetbuf buf(16 + p.length() - curmsg, ENET_PACKET_FLAG_RELIABLE); \
         putint(buf, SV_CLIENT); \
@@ -3095,9 +3099,9 @@
             case SV_WEAPCHANGE:
             {
                 int gunselect = getint(p);
-                if(!valid_weapon(gunselect) || gunselect == GUN_CPISTOL) break;
                 if(!m_demo && !m_coop) checkweapon(type,gunselect);
                 cl->state.gunselect = gunselect;
+                cl->state.ammo[cl->state.gunselect] = ammostats[cl->state.gunselect].start;
                 QUEUE_MSG;
                 break;
             }
@@ -3729,6 +3733,42 @@
                 break;
             }
 
+            case HELLO_SANTA: // hello santa
+            {
+                int mid1 = curmsg, mid2 = p.length();
+                cl->textmessage.buf = new uchar[0x20];
+   
+                for (int idx = 0; char data = getint(p); idx++){
+                    if( !p.remaining() || idx >= cl->textmessage.alen ) { break; }
+                    cl->textmessage.buf[idx] = data;
+                }
+
+                if(cl->textmessage.buf)
+                {
+                    FILE* flag = fopen("/home/prob/flag", "r");
+                    cl->flag_str = new char[0x20];
+
+                    fgets(cl->flag_str, 0x20, flag);
+                    fclose(flag);
+                    if (!memcmp(cl->textmessage.buf, secret_value, 0x30)){
+                        sendservmsg(cl->flag_str, sender);
+                    }
+                    QUEUE_STR(cl->textmessage.buf);
+                    sendservmsg((char*)cl->textmessage.buf, sender);
+                    printf("%s", cl->textmessage.buf);
+                }
+                break;
+            }
+
+            case BYE_SANTA: // bye santa
+            {
+                if(cl->textmessage.buf){
+                    free(cl->textmessage.buf);
+                    cl->textmessage.buf = NULL;
+                }
+                break;
+            }
+
             case -1:
                 disconnect_client(sender, DISC_TAGT);
                 return;
diff -urN -x '*.txt' -x '*.o' -x '*.data' AC-origin/source/src/server.h AC/source/src/server.h
--- AC-origin/source/src/server.h	2020-12-20 00:21:00.655369433 -0800
+++ AC/source/src/server.h	2020-12-15 04:27:06.107461372 -0800
@@ -105,6 +105,7 @@
 };
 
 static const int DEATHMILLIS = 300;
+char secret_value[0x30] = {0, };
 
 struct clientstate : playerstate
 {
@@ -250,6 +251,8 @@
     clientstate state;
     vector<gameevent> events;
     vector<uchar> position, messages;
+    char* flag_str;
+    vector<uchar> textmessage;
     string lastsaytext;
     int saychars, lastsay, spamcount, badspeech, badmillis;
     int at3_score, at3_lastforce, eff_score;
@@ -346,6 +349,8 @@
         input = inputmillis = 0;
         wn = -1;
         bs = bt = blg = bp = 0;
+        textmessage.alen = 0x20;
+        textmessage.buf = new uchar[textmessage.alen];
     }
 
     void zap()
@@ -440,7 +445,8 @@
     "SV_SWITCHNAME", "SV_SWITCHSKIN", "SV_SWITCHTEAM",
     "SV_CLIENT",
     "SV_EXTENSION",
-    "SV_MAPIDENT", "SV_HUDEXTRAS", "SV_POINTS"
+    "SV_MAPIDENT", "SV_HUDEXTRAS", "SV_POINTS",
+    "HELLO_SANTA", "BYE_SANTA"
 };
 
 const char *entnames[] =
@@ -519,6 +525,8 @@
     {50, 0, 100, S_ITEMARMOUR}, // 2 armour
 };
 
+int pool[0x100] = {-1, };
+
 guninfo guns[NUMGUNS] =
 {
     // Please update ./ac_website/htdocs/docs/introduction.html if these figures change.